let burgerBtn=document.querySelector(".js-burger"),header=document.querySelector(".js-header"),headerMobile=document.querySelector(".js-header--mobile"),headerOverlay=document.querySelector(".js-header-overlay"),body=document.querySelector("body");burgerBtn.addEventListener("click",()=>{header.classList.toggle("is-active"),headerMobile.classList.toggle("is-active"),headerOverlay.classList.toggle("is-active"),body.classList.toggle("is-overflow")}),headerOverlay.addEventListener("click",e=>{e.target.className===headerOverlay.className&&(headerOverlay.classList.remove("is-active"),header.classList.remove("is-active"),headerMobile.classList.remove("is-active"),body.classList.remove("is-overflow"))});const text=document.querySelector(".typing-text"),words=["Front-End developer","student on the IntelliStart course"];function setTyper(e,t){var s,r=0,o=0,l=0;function c(){s=setInterval(a,75)}function a(){const a=t[o];0==r?++l==a.length&&(r=1,clearInterval(s),setTimeout(c,2e3)):1==r&&0==--l&&(l=0,r=0,++o==t.length&&(o=0));const n=a.substring(0,l);e.textContent=n}c()}setTyper(text,words);const debounce=(e,t)=>{let s;return function(){const r=this,o=arguments;clearTimeout(s),s=setTimeout(()=>e.apply(r,o),t)}},links=document.querySelectorAll("header nav ul a"),sections=document.querySelectorAll("section");function changeLinkState(){let e=sections.length;for(;--e&&window.scrollY+50<sections[e].offsetTop;);links.forEach(e=>e.classList.remove("is-active")),links[e].classList.add("is-active")}window.addEventListener("scroll",debounce(changeLinkState));var scroll=new SmoothScroll('a[href*="#"]');
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4Lm1pbi5qcyJdLCJuYW1lcyI6WyJidXJnZXJCdG4iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJoZWFkZXIiLCJoZWFkZXJNb2JpbGUiLCJoZWFkZXJPdmVybGF5IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJlIiwidGFyZ2V0IiwiY2xhc3NOYW1lIiwicmVtb3ZlIiwidGV4dCIsIndvcmRzIiwic2V0VHlwZXIiLCJlbGVtZW50Iiwid29yZFR5cGVJbnRlcnZhbCIsImRpcmVjdGlvbiIsIndvcmRJbmRleCIsImxldHRlckluZGV4Iiwic3RhcnRUeXBpbmciLCJzZXRJbnRlcnZhbCIsInR5cGVMZXR0ZXIiLCJ3b3JkIiwibGVuZ3RoIiwiY2xlYXJJbnRlcnZhbCIsInNldFRpbWVvdXQiLCJ0ZXh0VG9UeXBlIiwic3Vic3RyaW5nIiwidGV4dENvbnRlbnQiLCJkZWJvdW5jZSIsImZ1bmMiLCJkZWxheSIsImluRGVib3VuY2UiLCJjb250ZXh0IiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJhcHBseSIsImxpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsInNlY3Rpb25zIiwiY2hhbmdlTGlua1N0YXRlIiwiaW5kZXgiLCJ3aW5kb3ciLCJzY3JvbGxZIiwib2Zmc2V0VG9wIiwiZm9yRWFjaCIsImxpbmsiLCJhZGQiLCJzY3JvbGwiLCJTbW9vdGhTY3JvbGwiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFVBQVlDLFNBQVNDLGNBQWMsY0FDbkNDLE9BQVNGLFNBQVNDLGNBQWMsY0FDaENFLGFBQWVILFNBQVNDLGNBQWMsc0JBQ3RDRyxjQUFnQkosU0FBU0MsY0FBYyxzQkFDdkNJLEtBQU9MLFNBQVNDLGNBQWMsUUFFbENGLFVBQVVPLGlCQUFpQixRQUFTLEtBQ2xDSixPQUFPSyxVQUFVQyxPQUFPLGFBQ3hCTCxhQUFhSSxVQUFVQyxPQUFPLGFBQzlCSixjQUFjRyxVQUFVQyxPQUFPLGFBQy9CSCxLQUFLRSxVQUFVQyxPQUFPLGlCQUd4QkosY0FBY0UsaUJBQWlCLFFBQVVHLElBQ3BDQSxFQUFFQyxPQUFPQyxZQUFjUCxjQUFjTyxZQUN0Q1AsY0FBY0csVUFBVUssT0FBTyxhQUMvQlYsT0FBT0ssVUFBVUssT0FBTyxhQUN4QlQsYUFBYUksVUFBVUssT0FBTyxhQUM5QlAsS0FBS0UsVUFBVUssT0FBTyxrQkFLMUIsTUFBTUMsS0FBT2IsU0FBU0MsY0FBYyxnQkFHOUJhLE1BQVEsQ0FDWixzQkFDQSxzQ0FPRixTQUFTQyxTQUFTQyxFQUFTRixHQVF6QixJQUlJRyxFQUpBQyxFQUh1QixFQUl2QkMsRUFBWSxFQUNaQyxFQUFjLEVBTWxCLFNBQVNDLElBQ1BKLEVBQW1CSyxZQUFZQyxFQWZQLElBa0IxQixTQUFTQSxJQUNQLE1BQU1DLEVBQU9WLEVBQU1LLEdBaEJNLEdBa0JyQkQsSUFDRkUsR0FFbUJJLEVBQUtDLFNBQ3RCUCxFQXJCc0IsRUFzQnRCUSxjQUFjVCxHQUNkVSxXQUFXTixFQTFCTyxNQUdJLEdBMEJmSCxHQUdVLEtBRm5CRSxJQWNGQSxFQUFjLEVBQ2RGLEVBM0N5QixJQTRDekJDLEdBRWlCTCxFQUFNVyxTQUNyQk4sRUFBWSxJQVpkLE1BQU1TLEVBQWFKLEVBQUtLLFVBQVUsRUFBR1QsR0FFckNKLEVBQVFjLFlBQWNGLEVBNUJ4QlAsSUFoQkZOLFNBQVNGLEtBQU1DLE9Bb0VmLE1BQU1pQixTQUFXLENBQUNDLEVBQU1DLEtBQ3RCLElBQUlDLEVBQ0osT0FBTyxXQUNMLE1BQU1DLEVBQVVDLEtBQ1ZDLEVBQU9DLFVBQ2JDLGFBQWFMLEdBQ2JBLEVBQWFQLFdBQVcsSUFBTUssRUFBS1EsTUFBTUwsRUFBU0UsR0FBT0osS0FPdkRRLE1BQVF6QyxTQUFTMEMsaUJBQWlCLG1CQUNsQ0MsU0FBVzNDLFNBQVMwQyxpQkFBaUIsV0FDM0MsU0FBU0Usa0JBRVAsSUFBSUMsRUFBUUYsU0FBU2xCLE9BR3JCLE9BQVFvQixHQUFTQyxPQUFPQyxRQUFVLEdBQUtKLFNBQVNFLEdBQU9HLFlBR3ZEUCxNQUFNUSxRQUFTQyxHQUFTQSxFQUFLM0MsVUFBVUssT0FBTyxjQUM5QzZCLE1BQU1JLEdBQU90QyxVQUFVNEMsSUFBSSxhQUk3QkwsT0FBT3hDLGlCQUFpQixTQUFVeUIsU0FBU2Esa0JBRTNDLElBQUlRLE9BQVMsSUFBSUMsYUFBYSIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgYnVyZ2VyQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWJ1cmdlcicpXHJcbmxldCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaGVhZGVyJylcclxubGV0IGhlYWRlck1vYmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1oZWFkZXItLW1vYmlsZScpXHJcbmxldCBoZWFkZXJPdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWhlYWRlci1vdmVybGF5JylcclxubGV0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JylcclxuXHJcbmJ1cmdlckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xyXG4gIGhlYWRlci5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKVxyXG4gIGhlYWRlck1vYmlsZS5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKVxyXG4gIGhlYWRlck92ZXJsYXkuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtYWN0aXZlJylcclxuICBib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2lzLW92ZXJmbG93JylcclxufSlcclxuXHJcbmhlYWRlck92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gIGlmKGUudGFyZ2V0LmNsYXNzTmFtZSA9PT0gaGVhZGVyT3ZlcmxheS5jbGFzc05hbWUpIHtcclxuICAgIGhlYWRlck92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJylcclxuICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKVxyXG4gICAgaGVhZGVyTW9iaWxlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpXHJcbiAgICBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW92ZXJmbG93JylcclxuICB9XHJcbn0pXHJcblxyXG4vLyBnZXQgdGhlIGVsZW1lbnRcclxuY29uc3QgdGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50eXBpbmctdGV4dCcpO1xyXG5cclxuLy8gbWFrZSBhIHdvcmRzIGFycmF5XHJcbmNvbnN0IHdvcmRzID0gW1xyXG4gIFwiRnJvbnQtRW5kIGRldmVsb3BlclwiLFxyXG4gICdzdHVkZW50IG9uIHRoZSBJbnRlbGxpU3RhcnQgY291cnNlJ1xyXG5dO1xyXG5cclxuLy8gc3RhcnQgdHlwaW5nIGVmZmVjdCB8IHwgY29weSBjb2RlcGVuXHJcblxyXG5zZXRUeXBlcih0ZXh0LCB3b3Jkcyk7XHJcblxyXG5mdW5jdGlvbiBzZXRUeXBlcihlbGVtZW50LCB3b3Jkcykge1xyXG5cclxuICBjb25zdCBMRVRURVJfVFlQRV9ERUxBWSA9IDc1O1xyXG4gIGNvbnN0IFdPUkRfU1RBWV9ERUxBWSA9IDIwMDA7XHJcblxyXG4gIGNvbnN0IERJUkVDVElPTl9GT1JXQVJEUyA9IDA7XHJcbiAgY29uc3QgRElSRUNUSU9OX0JBQ0tXQVJEUyA9IDE7XHJcblxyXG4gIHZhciBkaXJlY3Rpb24gPSBESVJFQ1RJT05fRk9SV0FSRFM7XHJcbiAgdmFyIHdvcmRJbmRleCA9IDA7XHJcbiAgdmFyIGxldHRlckluZGV4ID0gMDtcclxuXHJcbiAgdmFyIHdvcmRUeXBlSW50ZXJ2YWw7XHJcblxyXG4gIHN0YXJ0VHlwaW5nKCk7XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0VHlwaW5nKCkge1xyXG4gICAgd29yZFR5cGVJbnRlcnZhbCA9IHNldEludGVydmFsKHR5cGVMZXR0ZXIsIExFVFRFUl9UWVBFX0RFTEFZKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHR5cGVMZXR0ZXIoKSB7XHJcbiAgICBjb25zdCB3b3JkID0gd29yZHNbd29yZEluZGV4XTtcclxuXHJcbiAgICBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9GT1JXQVJEUykge1xyXG4gICAgICBsZXR0ZXJJbmRleCsrO1xyXG5cclxuICAgICAgaWYgKGxldHRlckluZGV4ID09IHdvcmQubGVuZ3RoKSB7XHJcbiAgICAgICAgZGlyZWN0aW9uID0gRElSRUNUSU9OX0JBQ0tXQVJEUztcclxuICAgICAgICBjbGVhckludGVydmFsKHdvcmRUeXBlSW50ZXJ2YWwpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoc3RhcnRUeXBpbmcsIFdPUkRfU1RBWV9ERUxBWSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fQkFDS1dBUkRTKSB7XHJcbiAgICAgIGxldHRlckluZGV4LS07XHJcblxyXG4gICAgICBpZiAobGV0dGVySW5kZXggPT0gMCkge1xyXG4gICAgICAgIG5leHRXb3JkKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0ZXh0VG9UeXBlID0gd29yZC5zdWJzdHJpbmcoMCwgbGV0dGVySW5kZXgpO1xyXG5cclxuICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0VG9UeXBlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbmV4dFdvcmQoKSB7XHJcblxyXG4gICAgbGV0dGVySW5kZXggPSAwO1xyXG4gICAgZGlyZWN0aW9uID0gRElSRUNUSU9OX0ZPUldBUkRTO1xyXG4gICAgd29yZEluZGV4Kys7XHJcblxyXG4gICAgaWYgKHdvcmRJbmRleCA9PSB3b3Jkcy5sZW5ndGgpIHtcclxuICAgICAgd29yZEluZGV4ID0gMDtcclxuICAgIH1cclxuXHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG4vLyBUaGFua3MgdG8gaHR0cHM6Ly9jb2RlYnVyc3QuaW8vdGhyb3R0bGluZy1hbmQtZGVib3VuY2luZy1pbi1qYXZhc2NyaXB0LWIwMWNhZDVjOGVkZlxyXG5cclxuLy8gIFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0gREVCT1VOQ0UgRlVOQ1RJT04gVE8gUFJFVkVOVCBQRVJGT1JNQU5DRSBJU1NVRVMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5jb25zdCBkZWJvdW5jZSA9IChmdW5jLCBkZWxheSkgPT4ge1xyXG4gIGxldCBpbkRlYm91bmNlXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXNcclxuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHNcclxuICAgIGNsZWFyVGltZW91dChpbkRlYm91bmNlKVxyXG4gICAgaW5EZWJvdW5jZSA9IHNldFRpbWVvdXQoKCkgPT4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKSwgZGVsYXkpXHJcbiAgfVxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENIQU5HRSBBQ1RJVkUgU1RBVEUgT0YgTElOS1MgT04gU0NST0xMIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIHNlbGVjdCBlbGVtZW50c1xyXG5jb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2hlYWRlciBuYXYgdWwgYScpO1xyXG5jb25zdCBzZWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlY3Rpb24nKTtcclxuZnVuY3Rpb24gY2hhbmdlTGlua1N0YXRlKCkge1xyXG4gIC8vIGdldCB0aGUgbnVtYmVyIG9mIHNlY3Rpb25zXHJcbiAgbGV0IGluZGV4ID0gc2VjdGlvbnMubGVuZ3RoO1xyXG4gIFxyXG4gIC8vIGNvbmRpdGlvbiB0byBjaGVjayBkaXN0YW5jZSBmcm9tIHdpbmRvd3MgdG8gc2VjdGlvblxyXG4gIHdoaWxlKC0taW5kZXggJiYgd2luZG93LnNjcm9sbFkgKyA1MCA8IHNlY3Rpb25zW2luZGV4XS5vZmZzZXRUb3ApIHt9XHJcbiAgXHJcbiAgLy8gY2hhbmdlIHN0YXRlIG9mIGxpbmtzXHJcbiAgbGlua3MuZm9yRWFjaCgobGluaykgPT4gbGluay5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKSk7XHJcbiAgbGlua3NbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xyXG59XHJcblxyXG4vLyBmaXJlIHRoZSBjaGFuZ2luZyBsaW5rIHN0YXRlXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBkZWJvdW5jZShjaGFuZ2VMaW5rU3RhdGUpKTtcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tIElOSVRJQUxJWkUgQ0hSSVMgRkVSRElOQU5ESSdTIFNNT09USCBTQ1JPTEwgVkFOSUxMQSBKUyBMSUJSQVJZIC0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG52YXIgc2Nyb2xsID0gbmV3IFNtb290aFNjcm9sbCgnYVtocmVmKj1cIiNcIl0nKTtcclxuXHJcbi8vIFRoYW5rcyB0byBodHRwczovL2dpdGh1Yi5jb20vY2ZlcmRpbmFuZGkvc21vb3RoLXNjcm9sbCJdfQ==
